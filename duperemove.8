.TH "duperemove" "8" "September 2016" "Version 0.11"
.SH "NAME"
duperemove \- Find duplicate extents and print them to stdout
.SH "SYNOPSIS"
\fBduperemove\fR \fI[options]\fR \fIfiles...\fI
.SH "DESCRIPTION"
.PP
\fBduperemove\fR is a simple tool for finding duplicated extents and
submitting them for deduplication. When given a list of files it will
hash their contents on a block by block basis and compare those hashes
to each other, finding and categorizing extents that match each
other. When given the \fB-d\fR option, \fBduperemove\fR will submit
those extents for deduplication using the Linux kernel extent-same
ioctl.

\fBduperemove\fR can store the hashes it computes in a \fIhashfile\fR. If
given an existing hashfile, \fBduperemove\fR will only compute hashes
for those files which have changed since the last run.  Thus you can run
\fBduperemove\fR repeatedly on your data as it changes, without having to
re-checksum unchanged data.  For more on hashfiles see the
\fB--hashfile\fR option below as well as the \fIExamples\fR section.

\fBduperemove\fR can also take input from the \fBfdupes\fR program, see the
\fB--fdupes\fR option below.

.SH "GENERAL"
Duperemove has two major modes of operation one of which is a subset
of the other.

.SS "Readonly / Non-deduplicating Mode"

When run without \fB-d\fR (the default) duperemove will print out one or
more tables of matching extents it has determined would be ideal
candidates for deduplication. As a result, readonly mode is useful for
seeing what duperemove might do when run with \fB-d\fR. The output could
also be used by some other software to submit the extents for
deduplication at a later time.

It is important to note that this mode will not print out \fBall\fR
instances of matching extents, just those it would consider for
deduplication.

Generally, duperemove does not concern itself with the underlying
representation of the extents it processes. Some of them could be
compressed, undergoing I/O, or even have already been deduplicated. In
dedupe mode, the kernel handles those details and therefore we try not
to replicate that work.

.SS "Deduping Mode"

This functions similarly to readonly mode with the exception that the
duplicated extents found in our "read, hash, and compare" step will
actually be submitted for deduplication. An estimate of the total data
deduplicated will be printed after the operation is complete. This
estimate is calculated by comparing the total amount of shared bytes
in each file before and after the dedupe.

.SH "OPTIONS"
\fIfiles\fR can refer to a list of regular files and directories or be
a hyphen (-) to read them from standard input.
If a directory is specified, all regular files within it will also be
scanned. Duperemove can also be told to recursively scan directories with
the '-r' switch.

.TP
\fB\-r\fR
Enable recursive dir traversal.

.TP
\fB\-d\fR
De-dupe the results - only works on \fIbtrfs\fR and \fIxfs (experimental)\FR.

.TP
\fB\-A\fR
Opens files readonly when deduping. Primarily for use by privileged
users on readonly snapshots.

.TP
\fB\-h\fR
Print numbers in human-readable format.

.TP
\fB\--hashfile=hashfile\fR
Use a file for storage of hashes instead of memory. This option drastically
reduces the memory footprint of duperemove and is recommended when your data
set is more than a few files large.  \fIHashfiles\fR are also reusable,
allowing you to further reduce the amount of hashing done on subsequent
dedupe runs.

If \fIhashfile\fR does not exist it will be created.  If it exists,
\fBduperemove\fR will check the file paths stored inside of it for changes.
Files which have changed will be rescanned and their updated hashes will be
written to the \fIhashfile\fR.  Deleted files will be removed from the \fIhashfile\fR.

New files are only added to the \fIhashfile\fR if they are discoverable via
the \fIfiles\fR argument.  For that reason you probably want to provide the
same \fIfiles\fR list and \fB-r\fR arguments on each run of
\fBduperemove\fR.  The file discovery algorithm is efficient and will only
visit each file once, even if it is already in the \fIhashfile\fR.

Adding a new path to a hashfile is as simple as adding it to the \fIfiles\fR
argument.

When deduping from a hashfile, duperemove will avoid deduping files which
have not changed since the last dedupe.

.TP
\fB\-L\fR
Print all files in the hashfile and exit. Requires the \fB\--hashfile\fR option.
Will print additional information about each file when run with \fB\-v\fR.

.TP
\fB\-R [file]\fR
Remove file from the db and exit. Can be specified multiple
times. Duperemove will read the list from standard input if a hyphen
(-) is provided. Requires the \fB\--hashfile\fR option.

\fBNote:\fR If you are piping filenames from another duperemove instance it
is advisable to do so into a temporary file first as running duperemove
simultaneously on the same hashfile may corrupt that hashfile.

.TP
\fB\--fdupes\fR
Run in \fBfdupes\fR mode. With this option you can pipe the output of
\fBfdupes\fR to duperemove to dedupe any duplicate files found. When
receiving a file list in this manner, duperemove will skip the hashing phase.

.TP
\fB\-v\fR
Be verbose.

.TP
\fB\--skip-zeroes\fR
Read data blocks and skip any zeroed blocks, useful for speedup duperemove,
but can prevent deduplication of zeroed files.

.TP
\fB\-b size\fR
Use the specified block size. The default is \fB128K\fR.

.TP
\fB\--io-threads=N\fR
Use N threads for I/O. This is used by the file hashing and dedupe
stages. Default is automatically detected based on number of host
cpus.

.TP
\fB\---dedupe-options=\fR\fIoptions\fR
Comma separated list of options which alter how we dedupe. Prepend 'no' to an
option in order to turn it off.
.RS
.TP
\fB[no]same\fR
Defaults to \fBoff\fR. Allow dedupe of extents within the same
file.
.TP
\fB[no]fiemap\fR
Defaults to \fBon\fR. Duperemove uses the \fIfiemap\fR ioctl during
the dedupe stage to optimize out already deduped extents as well as to
provide an estimate of the space saved after dedupe operations are
complete.

Unfortunately, some versions of Btrfs exhibit extrmely poor
performance in fiemap as the number of references on a file extent
goes up. If you are experiencing the dedupe phase slowing down
or 'locking up' this option may give you a significant amount of
performance back.

\fBNote:\fR This does not turn off all useage of fiemap, to disable
fiemap during the file scan stage, you will also want to use the
\fB--lookup-extents=no\fR option.
.TP
\fB[no]block\fR
Defaults to \fBoff\fR. Dedupe by block - don't optimize our data into
extents before dedupe. Generally this is undesirable as it will
greatly increase the total number of dedupe requests. There is also a
larger potential for file fragmentation.
.RE

.TP
\fB\--help\fR
Prints help text.

.TP
\fB\--lookup-extents=[yes|no]\fR
Defaults to no. Allows duperemove to skip checksumming some blocks by
checking their extent state.

.TP
\fB\-x\fR
Don't cross filesystem boundaries, this is the default behavior since
duperemove v0.11. The option is kept for backwards compatibility.

.TP
\fB\--read-hashes=hashfile\fR
\fB\This option is primarily for testing.\fR See the \fB--hashfile\fR option if you want to use hashfiles.

Read hashes from a hashfile. A file list is not required with this
option. Dedupe can be done if duperemove is run from the same base
directory as is stored in the hash file (basically duperemove has to
be able to find the files).

.TP
\fB\--write-hashes=hashfile\fR
\fB\This option is primarily for testing.\fR See the \fB--hashfile\fR option if you want to use hashfiles.

Write hashes to a hashfile. These can be read in at a later date and
deduped from.

.TP
\fB\--debug\fR
Print debug messages, forces \fB-v\fR if selected.

.TP
\fB\--hash-threads=N\fR
Deprecated, see \fB--io-threads\fR above.

.TP
\fB\--hash=alg\fR
Supported alg: sha256, xxhash, murmur3

.SH "EXAMPLES"
.SS "Simple Usage"
Dedupe the files in directory /foo, recurse into all subdirectories. You only want to use this for small data sets.
.IP
duperemove -dr /foo
.PP
Use duperemove with fdupes to dedupe identical files below directory foo.
.IP
fdupes -r /foo | duperemove --fdupes

.SS "Using Hashfiles"
Duperemove can optionally store the hashes it calculates in a
hashfile. Hashfiles have two primary advantages - memory usage and
re-usability. When using a hashfile, duperemove will stream computed
hashes to it, instead of main memory.

If Duperemove is run with an existing hashfile, it will only scan
those files which have changed since the last time the hashfile was
updated. The \fIfiles\fR argument controls which directories
duperemove will scan for newly added files. In the simplest usage, you
rerun duperemove with the same parameters and it will only scan
changed or newly added files - see the first example below.

.PP
Dedupe the files in directory foo, storing hashes in foo.hash. We can
run this command multiple times and duperemove will only checksum and
dedupe changed or newly added files.
.IP
duperemove -dr --hashfile=foo.hash foo/
.PP
Don't scan for new files, only update changed or deleted files, then dedupe.
.IP
duperemove -dr --hashfile=foo.hash
.PP
Add directory bar to our hashfile and discover any files that were
recently added to foo.
.IP
duperemove -dr --hashfile=foo.hash foo/ bar/
.PP
List the files tracked by foo.hash.
.IP
duperemove -L --hashfile=foo.hash

.SH "FAQ"

Please see the \fBFAQ.md\fR file which should have been included with your duperemove package.

.SH "NOTES"
Deduplication is currently only supported by the \fIbtrfs\fR and \fIxfs\fR filesystem.

.SH "SEE ALSO"
.BR hashstats(8)
.BR filesystems(5)
.BR btrfs(8)
.BR xfs(8)
.BR fdupes(1)
